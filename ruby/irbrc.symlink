#!/usr/bin/ruby
require 'irb/command'
require 'irb/completion'
require 'rubygems'

IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"

IRB.conf[:PROMPT_MODE] = :SIMPLE

IRB.conf[:AUTO_INDENT] = true

IRB.conf[:USE_AUTOCOMPLETE] = false

class Object
  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = is_a?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end
end

def me
  User.find_by_login(ENV['USER'].strip)
end

def r
  reload!
end


module IRB
  class CodeCommand < IRB::Command::Base
    category 'Awesomeness'
    description 'Opens the editor with temp file which is evaluated in context on every save'

    def execute(arg)
      require 'listen'
      require 'shellwords'
      require 'benchmark'

      Dir.mktmpdir do |dir|
        path = File.join(dir, 'code.rb')

        listener = Listen.to(dir) do
          tms = Benchmark.measure do
            irb_context.workspace.binding.eval(File.read(path))
          end

          puts Color.colorize(tms, [:BOLD])
        end

        begin
          listener.start

          unless system("code #{path.shellescape}")
            fail "failed to open using #{ENV['EDITOR']}"
          end
        ensure
          listener.stop
        end
      end
    end
  end

  module Command
    class N < DebugCommand
      def execute(arg)
        execute_debug_command(do_cmds: "next #{arg}")
      end
    end

    class S < DebugCommand
      def execute(arg)
        execute_debug_command(do_cmds: "step #{arg}")
      end
    end

    class Up < DebugCommand
      def execute(arg)
        execute_debug_command(pre_cmds: "up #{arg}")
      end
    end
  end
end

IRB::Command.register(:n, IRB::Command::N)
IRB::Command.register(:s, IRB::Command::S)
IRB::Command.register(:up, IRB::Command::Up)
IRB::Command.register(:code, IRB::CodeCommand)
